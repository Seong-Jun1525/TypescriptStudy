{
    // 컴파일러 옵션 지정
    "compilerOptions": {
        "rootDir": "./src",
        "outDir": "./build/js",
        "target": "ES6",
        "noEmitOnError": false,
        "module": "ESNext",

        // ts 컴파일러가 모듈을 찾는 방법 명시
        // - Classic 전략을 사용할 것인지
        // - Node 전략을 사용할 것인지
        "moduleResolution": "Node",

        "esModuleInterop": true,

        // 만약 여기가 비어 있다면
        // target es3면 기본값은 lib.d.ts
        // target es5면 기본값은 dom, es6, scripthost
        // 컴파일할때 사용될 라이브러리들 명시
        "lib": ["ESNext", "DOM"],

        // true: 프로젝트 내에 모든 각각의 소스코드 파일을 모듈로 만들기를 강제함
        // 소스코드 파일에서 import 또는 export를 사용하면 그 파일은 모듈이 되지만
        // 그렇지 않으면 그 파일은 전역 공간으로 정의되고 모듈이 아니기에 에러가 발생
        "isolatedModules": false,

        // ts 소스의 모든 주석을 제거하는것을 설정
        "removeComments": false,

        // js와 ts 파일을 같이 사용할 수 있게 해줌
        "allowJs": false,

        // allowJs와 함께 작동함. checkJs가 활성되면 js파일에 오류가 보고됨.
        // 이는 프로젝트에 포함된 모든 js파일의 맨 위에 // @ts-check를 포함하는 것과 같음
        "checkJs": false,

        // 파일의 이름을 대소문자 판별하게 하는 옵션
        "forceConsistentCasingInFileNames": false,

        // 이 옵션을 true로 하면 TS파일을 js로 컴파일하는 과정에서 js파일과 함께 d.ts 선언 파일이 생성되게 됨.
        // 이 선언파일에서 타입들만 따로 관리할 수 있음
        "declaration": false,
        
        "strict": true
    },
    // 컴파일할 개별 파일 목록(확장자 이름 필수)
    "files": [
        "node_modules/library/index.ts"
    ],
    // 컴파일러를 이용해서 변환할 폴더 경로를 지정
    "include": [
        "src/**/*",
        "tests/**/*"
    ],
    // 컴파일러를 이용해서 변환하지 않을 폴더 경로를 지정
    "exclude": [
        "node_modules",
        "dist"
    ],
    // 상속해서 사용할 다른 ts 구성파일 지정
    "extends": "main_config.json"
}